/*
 * MarvelComicsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/14/2016
 */
package com.marvel.gateway.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class Story 
        extends java.util.Observable
        implements java.io.Serializable {
    private static final long serialVersionUID = 4653755124170166442L;
    private CharacterList characters;
    private ComicList comics;
    private CreatorList creators;
    private String description;
    private EventList events;
    private int id;
    private Date modified;
    private ComicSummary originalissue;
    private String resourceURI;
    private SeriesList series;
    private Thumbnail thumbnail;
    private String title;
    private String type;
    /** GETTER
     * A resource list of characters which appear in this story.
     */
    @JsonGetter("characters")
    public CharacterList getCharacters ( ) { 
        return this.characters;
    }
    
    /** SETTER
     * A resource list of characters which appear in this story.
     */
    @JsonSetter("characters")
    public void setCharacters (CharacterList value) { 
        this.characters = value;
        notifyObservers(this.characters);
    }
 
    /** GETTER
     * A resource list containing comics in which this story takes place.
     */
    @JsonGetter("comics")
    public ComicList getComics ( ) { 
        return this.comics;
    }
    
    /** SETTER
     * A resource list containing comics in which this story takes place.
     */
    @JsonSetter("comics")
    public void setComics (ComicList value) { 
        this.comics = value;
        notifyObservers(this.comics);
    }
 
    /** GETTER
     * A resource list of creators who worked on this story.
     */
    @JsonGetter("creators")
    public CreatorList getCreators ( ) { 
        return this.creators;
    }
    
    /** SETTER
     * A resource list of creators who worked on this story.
     */
    @JsonSetter("creators")
    public void setCreators (CreatorList value) { 
        this.creators = value;
        notifyObservers(this.creators);
    }
 
    /** GETTER
     * A short description of the story.
     */
    @JsonGetter("description")
    public String getDescription ( ) { 
        return this.description;
    }
    
    /** SETTER
     * A short description of the story.
     */
    @JsonSetter("description")
    public void setDescription (String value) { 
        this.description = value;
        notifyObservers(this.description);
    }
 
    /** GETTER
     * A resource list of the events in which this story appears.
     */
    @JsonGetter("events")
    public EventList getEvents ( ) { 
        return this.events;
    }
    
    /** SETTER
     * A resource list of the events in which this story appears.
     */
    @JsonSetter("events")
    public void setEvents (EventList value) { 
        this.events = value;
        notifyObservers(this.events);
    }
 
    /** GETTER
     * The unique ID of the story resource.
     */
    @JsonGetter("id")
    public int getId ( ) { 
        return this.id;
    }
    
    /** SETTER
     * The unique ID of the story resource.
     */
    @JsonSetter("id")
    public void setId (int value) { 
        this.id = value;
        notifyObservers(this.id);
    }
 
    /** GETTER
     * The date the resource was most recently modified.
     */
    @JsonGetter("modified")
    public Date getModified ( ) { 
        return this.modified;
    }
    
    /** SETTER
     * The date the resource was most recently modified.
     */
    @JsonSetter("modified")
    public void setModified (Date value) { 
        this.modified = value;
        notifyObservers(this.modified);
    }
 
    /** GETTER
     * A summary representation of the issue in which this story was originally published.
     */
    @JsonGetter("originalissue")
    public ComicSummary getOriginalissue ( ) { 
        return this.originalissue;
    }
    
    /** SETTER
     * A summary representation of the issue in which this story was originally published.
     */
    @JsonSetter("originalissue")
    public void setOriginalissue (ComicSummary value) { 
        this.originalissue = value;
        notifyObservers(this.originalissue);
    }
 
    /** GETTER
     * The canonical URL identifier for this resource.
     */
    @JsonGetter("resourceURI")
    public String getResourceURI ( ) { 
        return this.resourceURI;
    }
    
    /** SETTER
     * The canonical URL identifier for this resource.
     */
    @JsonSetter("resourceURI")
    public void setResourceURI (String value) { 
        this.resourceURI = value;
        notifyObservers(this.resourceURI);
    }
 
    /** GETTER
     * A resource list containing series in which this story appears.
     */
    @JsonGetter("series")
    public SeriesList getSeries ( ) { 
        return this.series;
    }
    
    /** SETTER
     * A resource list containing series in which this story appears.
     */
    @JsonSetter("series")
    public void setSeries (SeriesList value) { 
        this.series = value;
        notifyObservers(this.series);
    }
 
    /** GETTER
     * The representative image for this story.
     */
    @JsonGetter("thumbnail")
    public Thumbnail getThumbnail ( ) { 
        return this.thumbnail;
    }
    
    /** SETTER
     * The representative image for this story.
     */
    @JsonSetter("thumbnail")
    public void setThumbnail (Thumbnail value) { 
        this.thumbnail = value;
        notifyObservers(this.thumbnail);
    }
 
    /** GETTER
     * The story title.
     */
    @JsonGetter("title")
    public String getTitle ( ) { 
        return this.title;
    }
    
    /** SETTER
     * The story title.
     */
    @JsonSetter("title")
    public void setTitle (String value) { 
        this.title = value;
        notifyObservers(this.title);
    }
 
    /** GETTER
     * The story type e.g. interior story, cover, text story.
     */
    @JsonGetter("type")
    public String getType ( ) { 
        return this.type;
    }
    
    /** SETTER
     * The story type e.g. interior story, cover, text story.
     */
    @JsonSetter("type")
    public void setType (String value) { 
        this.type = value;
        notifyObservers(this.type);
    }
 
}
 